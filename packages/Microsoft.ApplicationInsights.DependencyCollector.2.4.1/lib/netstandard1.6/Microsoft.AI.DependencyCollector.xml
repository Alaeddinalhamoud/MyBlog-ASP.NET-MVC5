<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.AI.DependencyCollector</name>
    </assembly>
    <members>
        <member name="T:Microsoft.ApplicationInsights.DependencyCollector.DependencyTrackingTelemetryModule">
            <summary>
            Remote dependency monitoring.
            </summary>
        </member>
        <member name="P:Microsoft.ApplicationInsights.DependencyCollector.DependencyTrackingTelemetryModule.DisableRuntimeInstrumentation">
            <summary>
            Gets or sets a value indicating whether to disable runtime instrumentation.
            </summary>
        </member>
        <member name="P:Microsoft.ApplicationInsights.DependencyCollector.DependencyTrackingTelemetryModule.DisableDiagnosticSourceInstrumentation">
            <summary>
            Gets or sets a value indicating whether to disable Http Desktop DiagnosticSource instrumentation.
            </summary>
        </member>
        <member name="P:Microsoft.ApplicationInsights.DependencyCollector.DependencyTrackingTelemetryModule.ExcludeComponentCorrelationHttpHeadersOnDomains">
            <summary>
            Gets the component correlation configuration.
            </summary>
        </member>
        <member name="P:Microsoft.ApplicationInsights.DependencyCollector.DependencyTrackingTelemetryModule.SetComponentCorrelationHttpHeaders">
            <summary>
            Gets or sets a value indicating whether the correlation headers would be set on outgoing http requests.
            </summary>
        </member>
        <member name="P:Microsoft.ApplicationInsights.DependencyCollector.DependencyTrackingTelemetryModule.ProfileQueryEndpoint">
            <summary>
            Gets or sets the endpoint that is to be used to get the application insights resource's profile (appId etc.).
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.DependencyTrackingTelemetryModule.Dispose">
            <summary>
            IDisposable implementation.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.DependencyTrackingTelemetryModule.Initialize(Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration)">
            <summary>
            Initialize method is called after all configuration properties have been loaded from the configuration.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.DependencyTrackingTelemetryModule.Dispose(System.Boolean)">
            <summary>
            IDisposable implementation.
            </summary>
            <param name="disposing">The method has been called directly or indirectly by a user's code.</param>
        </member>
        <member name="T:Microsoft.ApplicationInsights.DependencyCollector.HttpDependenciesParsingTelemetryInitializer">
            <summary>
            Telemetry Initializer that parses http dependencies into well-known types like Azure Storage.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.HttpDependenciesParsingTelemetryInitializer.Initialize(Microsoft.ApplicationInsights.Channel.ITelemetry)">
            <summary>
            If telemetry item is http dependency - converts it to the well-known type of the dependency.
            </summary>
            <param name="telemetry">Telemetry item to convert.</param>
        </member>
        <member name="T:Microsoft.ApplicationInsights.DependencyCollector.SanitizedHostList">
            <summary>
            Sanitized collection on host strings.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.SanitizedHostList.Add(System.String)">
            <summary>
            We sanitize before adding to the list. We try our best to extract the host name from the passed in item and store that in the collection.
            </summary>
            <param name="item">Item to be added.</param>
        </member>
        <member name="T:Microsoft.ApplicationInsights.DependencyCollector.Implementation.DependencyCollectorEventSource">
            <summary>
            ETW EventSource tracing class.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.DependencyCollectorEventSource.DependencyTelemetryItemIsNullWarning(System.String)">
            <summary>
            Logs the information when the DependencyTelemetry item is null as warning.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.DependencyCollectorEventSource.WebRequestIsNullWarning(System.String)">
            <summary>
            Logs the information when the HttpWebRequest is null as warning.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.DependencyCollectorEventSource.TrackingAnExistingTelemetryItemVerbose(System.String)">
            <summary>
            Logs the information when a telemetry item that is already existing in the tables (that is currently being tracked) is tracked again.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.DependencyCollectorEventSource.TelemetryToTrackIsNullWarning(System.String)">
            <summary>
            Logs the information when the telemetry item to track is null.
            </summary>
        </member>
        <member name="T:Microsoft.ApplicationInsights.DependencyCollector.Implementation.DependencyCollectorEventSource.Keywords">
            <summary>
            Keywords for the <see cref="T:Microsoft.ApplicationInsights.DependencyCollector.Implementation.DependencyCollectorEventSource"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ApplicationInsights.DependencyCollector.Implementation.DependencyCollectorEventSource.Keywords.UserActionable">
            <summary>
            Key word for user actionable events.
            </summary>
        </member>
        <member name="F:Microsoft.ApplicationInsights.DependencyCollector.Implementation.DependencyCollectorEventSource.Keywords.RddEventKeywords">
            <summary>
            Key word for resource discovery module failures.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.ApplicationInsightsUrlFilter.IsApplicationInsightsUrl(System.Uri)">
            <summary>
            Determines whether an URL is application insights URL.
            </summary>
            <param name="url">HTTP URL.</param>
            <returns>True if URL is application insights url, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.ApplicationInsightsUrlFilter.IsApplicationInsightsUrl(System.String)">
            <summary>
            Determines whether an URL is application insights URL.
            </summary>
            <param name="url">HTTP URL.</param>
            <returns>True if URL is application insights url, otherwise false.</returns>
        </member>
        <member name="P:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpCoreDiagnosticSourceListener.PendingDependencyTelemetry">
            <summary>
            Get the DependencyTelemetry objects that are still waiting for a response from the dependency. This will most likely only be used for testing purposes.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpCoreDiagnosticSourceListener.OnCompleted">
            <summary>
            Notifies the observer that the provider has finished sending push-based notifications.
            <seealso cref="M:System.IObserver`1.OnCompleted"/>
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpCoreDiagnosticSourceListener.OnError(System.Exception)">
            <summary>
            Notifies the observer that the provider has experienced an error condition.
            <seealso cref="M:System.IObserver`1.OnError(System.Exception)"/>
            </summary>
            <param name="error">An object that provides additional information about the error.</param>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpCoreDiagnosticSourceListener.OnException(System.Exception,System.Net.Http.HttpRequestMessage)">
            <summary>
            Handler for Exception event, it is sent when request processing cause an exception (e.g. because of DNS or network issues)
            Stop event will be sent anyway with null response.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpCoreDiagnosticSourceListener.OnActivityStart(System.Net.Http.HttpRequestMessage)">
            <summary>
            Handler for Activity start event (outgoing request is about to be sent).
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpCoreDiagnosticSourceListener.OnActivityStop(System.Net.Http.HttpResponseMessage,System.Net.Http.HttpRequestMessage,System.Threading.Tasks.TaskStatus)">
            <summary>
            Handler for Activity stop event (response is received for the outgoing request).
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpCoreDiagnosticSourceListener.OnRequest(System.Net.Http.HttpRequestMessage,System.Guid)">
            <summary>
            Diagnostic event handler method for 'System.Net.Http.Request' event.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpCoreDiagnosticSourceListener.OnResponse(System.Net.Http.HttpResponseMessage,System.Guid)">
            <summary>
            Diagnostic event handler method for 'System.Net.Http.Response' event.
            This event will be fired only if response was received (and not called for faulted or cancelled requests).
            </summary>
        </member>
        <member name="T:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpCoreDiagnosticSourceListener.HttpCoreDiagnosticSourceSubscriber">
            <summary>
            Diagnostic listener implementation that listens for events specific to outgoing dependency requests.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpCoreDiagnosticSourceListener.HttpCoreDiagnosticSourceSubscriber.OnNext(System.Diagnostics.DiagnosticListener)">
            <summary>
            This method gets called once for each existing DiagnosticListener when this
            DiagnosticListener is added to the list of DiagnosticListeners
            (<see cref="P:System.Diagnostics.DiagnosticListener.AllListeners"/>). This method will
            also be called for each subsequent DiagnosticListener that is added to the list of
            DiagnosticListeners.
            <seealso cref="M:System.IObserver`1.OnNext(`0)"/>
            </summary>
            <param name="value">The DiagnosticListener that exists when this listener was added to
            the list, or a DiagnosticListener that got added after this listener was added.</param>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpCoreDiagnosticSourceListener.HttpCoreDiagnosticSourceSubscriber.OnCompleted">
            <summary>
            Notifies the observer that the provider has finished sending push-based notifications.
            <seealso cref="M:System.IObserver`1.OnCompleted"/>
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpCoreDiagnosticSourceListener.HttpCoreDiagnosticSourceSubscriber.OnError(System.Exception)">
            <summary>
            Notifies the observer that the provider has experienced an error condition.
            <seealso cref="M:System.IObserver`1.OnError(System.Exception)"/>
            </summary>
            <param name="error">An object that provides additional information about the error.</param>
        </member>
        <member name="T:Microsoft.ApplicationInsights.DependencyCollector.Implementation.PropertyFetcher">
            <summary>
            Efficient implementation of fetching properties of anonymous types with reflection.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.PropertyFetcher.PropertyFetch.FetcherForProperty(System.Reflection.PropertyInfo)">
            <summary>
            Create a property fetcher from a .NET Reflection PropertyInfo class that
            represents a property of a particular type.  
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.PropertyFetcher.PropertyFetch.Fetch(System.Object)">
            <summary>
            Given an object, fetch the property that this propertyFetch represents. 
            </summary>
        </member>
        <member name="T:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpParsers.AzureBlobHttpParser">
            <summary>
            HTTP Dependency parser that attempts to parse dependency as Azure Blob call.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpParsers.AzureBlobHttpParser.TryParse(Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry@)">
            <summary>
            Tries parsing given dependency telemetry item. 
            </summary>
            <param name="httpDependency">Dependency item to parse. It is expected to be of HTTP type.</param>
            <returns><code>true</code> if successfully parsed dependency.</returns>
        </member>
        <member name="T:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpParsers.AzureIotHubHttpParser">
            <summary>
            HTTP Dependency parser that attempts to parse dependency as Azure IoT Hub call.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpParsers.AzureIotHubHttpParser.TryParse(Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry@)">
            <summary>
            Tries parsing given dependency telemetry item. 
            </summary>
            <param name="httpDependency">Dependency item to parse. It is expected to be of HTTP type.</param>
            <returns><code>true</code> if successfully parsed dependency.</returns>
        </member>
        <member name="T:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpParsers.AzureQueueHttpParser">
            <summary>
            HTTP Dependency parser that attempts to parse dependency as Azure Queue call.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpParsers.AzureQueueHttpParser.TryParse(Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry@)">
            <summary>
            Tries parsing given dependency telemetry item. 
            </summary>
            <param name="httpDependency">Dependency item to parse. It is expected to be of HTTP type.</param>
            <returns><code>true</code> if successfully parsed dependency.</returns>
        </member>
        <member name="T:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpParsers.AzureServiceBusHttpParser">
            <summary>
            HTTP Dependency parser that attempts to parse dependency as Azure Service Bus call.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpParsers.AzureServiceBusHttpParser.TryParse(Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry@)">
            <summary>
            Tries parsing given dependency telemetry item. 
            </summary>
            <param name="httpDependency">Dependency item to parse. It is expected to be of HTTP type.</param>
            <returns><code>true</code> if successfully parsed dependency.</returns>
        </member>
        <member name="T:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpParsers.AzureTableHttpParser">
            <summary>
            HTTP Dependency parser that attempts to parse dependency as Azure Table call.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpParsers.AzureTableHttpParser.TryParse(Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry@)">
            <summary>
            Tries parsing given dependency telemetry item. 
            </summary>
            <param name="httpDependency">Dependency item to parse. It is expected to be of HTTP type.</param>
            <returns><code>true</code> if successfully parsed dependency.</returns>
        </member>
        <member name="T:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpParsers.DocumentDbHttpParser">
            <summary>
            HTTP Dependency parser that attempts to parse dependency as Azure DocumentDB call.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpParsers.DocumentDbHttpParser.TryParse(Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry@)">
            <summary>
            Tries parsing given dependency telemetry item. 
            </summary>
            <param name="httpDependency">Dependency item to parse. It is expected to be of HTTP type.</param>
            <returns><code>true</code> if successfully parsed dependency.</returns>
        </member>
        <member name="T:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpParsers.GenericServiceHttpParser">
            <summary>
            HTTP Dependency parser that attempts to parse dependency as generic WCF or Web Service call.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpParsers.GenericServiceHttpParser.TryParse(Microsoft.ApplicationInsights.DataContracts.DependencyTelemetry@)">
            <summary>
            Tries parsing given dependency telemetry item. 
            </summary>
            <param name="httpDependency">Dependency item to parse. It is expected to be of HTTP type.</param>
            <returns><code>true</code> if successfully parsed dependency.</returns>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpParsers.HttpParsingHelper.BuildOperationMoniker(System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Builds a resource operation moniker in the format of "VERB /a/*/b/*/c".
            </summary>
            <param name="verb">The HTTP verb.</param>
            <param name="resourcePath">The resource path represented as a list of resource type and resource ID pairs.</param>
            <returns>Operation moniker string.</returns>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpParsers.HttpParsingHelper.ParseResourcePath(System.String)">
            <summary>
            Parses request path into REST resource path represented as a list of resource type and resource ID pairs.
            </summary>
            <param name="requestPath">The request path.</param>
            <returns>A list of resource type and resource ID pairs.</returns>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpParsers.HttpParsingHelper.TokenizeRequestPath(System.String)">
            <summary>
            Tokenizes request path.
            E.g. the string <code>"/a/b/c/d?e=f"</code> will be tokenized into <code>[ "a", "b", "c", "d" ]</code>.
            </summary>
            <param name="requestPath">The request path.</param>
            <returns>List of tokens.</returns>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpParsers.HttpParsingHelper.ExtractQuryParameters(System.String)">
            <summary>
            Extracts parameters from query string.
            </summary>
            <param name="requestPath">The request path.</param>
            <returns>
            Dictionary of query parameters. 
            If parameter is specified more than once then the last value is returned.
            </returns>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpParsers.HttpParsingHelper.ExtractVerb(System.String,System.String@,System.String@,System.String[])">
            <summary>
            Extracts the HTTP verb from dependency name.
            </summary>
            <param name="name">The dependency name.</param>
            <param name="verb">The extracted verb (<code>null</code> if not matched).</param>
            <param name="nameWithoutVerb">The dependency name sans the extracted verb.</param>
            <param name="supportedVerbs">List of supported verbs to extract.</param>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpParsers.HttpParsingHelper.Split(System.String,System.Char[],System.Int32,System.Int32)">
            <summary>
            Splits substring by given delimiters.
            </summary>
            <param name="str">The string to split.</param>
            <param name="delimiters">The delimiters.</param>
            <param name="startIdx">
            The index at which splitting will start. 
            This is not validated and expected to be within input string range.
            </param>
            <param name="endIdx">
            The index at which splitting will end. 
            If -1 then string will be split till it's end.
            This is not validated and expected to be less than string length.
            </param>
            <returns>A list of substrings.</returns>
        </member>
        <member name="M:Microsoft.ApplicationInsights.DependencyCollector.Implementation.HttpParsers.HttpParsingHelper.EndsWithAny(System.String,System.String[])">
            <summary>
            Checks if a string ends with any of the specified suffixes.
            </summary>
            <param name="str">The string to check.</param>
            <param name="suffixes">The suffixes.</param>
            <returns><code>true</code> if string ends with any of the suffixes.</returns>
        </member>
        <member name="T:Microsoft.ApplicationInsights.Common.AppMapCorrelationEventSource">
            <summary>
            ETW EventSource tracing class.
            </summary>
            <summary>
            ETW EventSource tracing class.
            </summary>
        </member>
        <member name="T:Microsoft.ApplicationInsights.Common.AppMapCorrelationEventSource.Keywords">
            <summary>
            Keywords for the <see cref="T:Microsoft.ApplicationInsights.Common.AppMapCorrelationEventSource"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ApplicationInsights.Common.AppMapCorrelationEventSource.Keywords.UserActionable">
            <summary>
            Key word for user actionable events.
            </summary>
        </member>
        <member name="F:Microsoft.ApplicationInsights.Common.AppMapCorrelationEventSource.Keywords.Diagnostics">
            <summary>
            Key word for diagnostics events.
            </summary>
        </member>
        <member name="T:Microsoft.ApplicationInsights.Common.CorrelationIdLookupHelper">
            <summary>
            A store for instrumentation App Ids. This makes sure we don't query the public endpoint to find an app Id for the same instrumentation key more than once.
            </summary>
        </member>
        <member name="F:Microsoft.ApplicationInsights.Common.CorrelationIdLookupHelper.MAXSIZE">
            <summary>
            Max number of app ids to cache.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.Common.CorrelationIdLookupHelper.#ctor(System.Func{System.String,System.Threading.Tasks.Task{System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ApplicationInsights.Common.CorrelationIdLookupHelper" /> class mostly to be used by the test classes to provide an override for fetching appId logic.
            </summary>
            <param name="appIdProviderMethod">The delegate to be called to fetch the appId.</param>
        </member>
        <member name="M:Microsoft.ApplicationInsights.Common.CorrelationIdLookupHelper.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ApplicationInsights.Common.CorrelationIdLookupHelper" /> class mostly to be used by the test classes to seed the instrumentation key -> app Id relationship.
            </summary>
            <param name="mapSeed">A dictionary that contains known instrumentation key - app id relationship.</param>
        </member>
        <member name="M:Microsoft.ApplicationInsights.Common.CorrelationIdLookupHelper.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ApplicationInsights.Common.CorrelationIdLookupHelper" /> class.
            </summary>
            <param name="endpointAddress">Endpoint that is to be used to fetch appId.</param>
        </member>
        <member name="M:Microsoft.ApplicationInsights.Common.CorrelationIdLookupHelper.TryGetXComponentCorrelationId(System.String,System.String@)">
            <summary>
            Retrieves the correlation id corresponding to a given instrumentation key.
            </summary>
            <param name="instrumentationKey">Instrumentation key string.</param>
            <param name="correlationId">AppId corresponding to the provided instrumentation key.</param>
            <returns>true if correlationId was successfully retrieved; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.ApplicationInsights.Common.CorrelationIdLookupHelper.IsFetchAppInProgress(System.String)">
            <summary>
            This method is purely a test helper at this point. It checks whether the task to get app ID is still running.
            </summary>
            <returns>True if fetch task is still in progress, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.ApplicationInsights.Common.CorrelationIdLookupHelper.FetchAppIdFromService(System.String)">
            <summary>
            Retrieves the app id given the instrumentation key.
            </summary>
            <param name="instrumentationKey">Instrumentation key for which app id is to be retrieved.</param>
            <returns>App id.</returns>
        </member>
        <member name="M:Microsoft.ApplicationInsights.Common.CorrelationIdLookupHelper.GetAppIdEndPointUri(System.String)">
            <summary>
            Strips off any relative path at the end of the base URI and then appends the known relative path to get the app id uri.
            </summary>
            <param name="instrumentationKey">AI resource's instrumentation key.</param>
            <returns>Computed Uri.</returns>
        </member>
        <member name="M:Microsoft.ApplicationInsights.Common.CorrelationIdLookupHelper.RegisterFailure(System.String,System.Exception)">
            <summary>
            Registers failure for further action in future.
            </summary>
            <param name="instrumentationKey">Instrumentation key for which the failure occurred.</param>
            <param name="ex">Exception indicating failure.</param>
        </member>
        <member name="T:Microsoft.ApplicationInsights.Common.CorrelationIdLookupHelper.FailedResult">
            <summary>
            Structure that represents a failed fetch app Id call.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.Common.CorrelationIdLookupHelper.FailedResult.#ctor(System.DateTime,System.Net.HttpStatusCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ApplicationInsights.Common.CorrelationIdLookupHelper.FailedResult" /> class.
            </summary>
            <param name="failureTime">Time when the failure occurred.</param>
            <param name="failureCode">Failure response code.</param>
        </member>
        <member name="M:Microsoft.ApplicationInsights.Common.CorrelationIdLookupHelper.FailedResult.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ApplicationInsights.Common.CorrelationIdLookupHelper.FailedResult" /> class.
            </summary>
            <param name="failureTime">Time when the failure occurred.</param>
        </member>
        <member name="P:Microsoft.ApplicationInsights.Common.CorrelationIdLookupHelper.FailedResult.FailureTime">
            <summary>
            Gets the time of failure.
            </summary>
        </member>
        <member name="P:Microsoft.ApplicationInsights.Common.CorrelationIdLookupHelper.FailedResult.FailureCode">
            <summary>
            Gets the integer value for response code representing the type of failure.
            </summary>
        </member>
        <member name="P:Microsoft.ApplicationInsights.Common.CorrelationIdLookupHelper.FailedResult.ShouldRetry">
            <summary>
            Gets a value indicating whether the failure is likely to go away when a retry happens.
            </summary>
        </member>
        <member name="T:Microsoft.ApplicationInsights.Common.ExceptionUtilities">
            <summary>
            Utility functions for dealing with exceptions.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.Common.ExceptionUtilities.GetExceptionDetailString(System.Exception)">
            <summary>
            Get the string representation of this Exception with special handling for AggregateExceptions.
            </summary>
            <param name="ex">The exception to convert to a string.</param>
            <returns>The detailed string version of the provided exception.</returns>
        </member>
        <member name="T:Microsoft.ApplicationInsights.Common.ICorrelationIdLookupHelper">
            <summary>
            An interface for getting a correlation id from a provided instrumentation key.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.Common.ICorrelationIdLookupHelper.TryGetXComponentCorrelationId(System.String,System.String@)">
            <summary>
            Retrieves the correlation id corresponding to a given instrumentation key.
            </summary>
            <param name="instrumentationKey">Instrumentation key string.</param>
            <param name="correlationId">AppId corresponding to the provided instrumentation key.</param>
            <returns>true if correlationId was successfully retrieved; false otherwise.</returns>
        </member>
        <member name="T:Microsoft.ApplicationInsights.Common.RequestResponseHeaders">
            <summary>
            Header names for requests / responses.
            </summary>
        </member>
        <member name="F:Microsoft.ApplicationInsights.Common.RequestResponseHeaders.RequestContextHeader">
            <summary>
            Request-Context header.
            </summary>
        </member>
        <member name="F:Microsoft.ApplicationInsights.Common.RequestResponseHeaders.RequestContextCorrelationSourceKey">
            <summary>
            Source key in the request context header that is added by an application while making http requests and retrieved by the other application when processing incoming requests.
            </summary>
        </member>
        <member name="F:Microsoft.ApplicationInsights.Common.RequestResponseHeaders.RequestContextCorrelationTargetKey">
            <summary>
            Target key in the request context header that is added to the response and retrieved by the calling application when processing incoming responses.
            </summary>
        </member>
        <member name="F:Microsoft.ApplicationInsights.Common.RequestResponseHeaders.RequestContextSourceRoleNameKey">
            <summary>
            Source-RoleName key in the request context header that is added by an application while making http requests and retrieved by the other application when processing incoming requests.
            </summary>
        </member>
        <member name="F:Microsoft.ApplicationInsights.Common.RequestResponseHeaders.RequestContextTargetRoleNameKey">
            <summary>
            Target-RoleName key in the request context header that is added to the response and retrieved by the calling application when processing incoming responses.
            </summary>
        </member>
        <member name="F:Microsoft.ApplicationInsights.Common.RequestResponseHeaders.StandardParentIdHeader">
            <summary>
            Legacy parent Id header.
            </summary>
        </member>
        <member name="F:Microsoft.ApplicationInsights.Common.RequestResponseHeaders.StandardRootIdHeader">
            <summary>
            Legacy root id header.
            </summary>
        </member>
        <member name="F:Microsoft.ApplicationInsights.Common.RequestResponseHeaders.RequestIdHeader">
            <summary>
            Standard Request-Id Id header.
            </summary>
        </member>
        <member name="F:Microsoft.ApplicationInsights.Common.RequestResponseHeaders.CorrelationContextHeader">
            <summary>
            Standard Correlation-Context header.
            </summary>
        </member>
        <member name="T:Microsoft.ApplicationInsights.Common.HeadersUtilities">
            <summary>
            Generic functions that can be used to get and set Http headers.
            </summary>
        </member>
        <member name="M:Microsoft.ApplicationInsights.Common.HeadersUtilities.GetHeaderKeyValue(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Get the key value from the provided HttpHeader value that is set up as a comma-separated list of key value pairs. Each key value pair is formatted like (key)=(value).
            </summary>
            <param name="headerValues">The header values that may contain key name/value pairs.</param>
            <param name="keyName">The name of the key value to find in the provided header values.</param>
            <returns>The first key value, if it is found. If it is not found, then null.</returns>
        </member>
        <member name="M:Microsoft.ApplicationInsights.Common.HeadersUtilities.UpdateHeaderWithKeyValue(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Given the provided list of header value strings, return a list of key name/value pairs
            with the provided keyName and keyValue. If the initial header value strings contains
            the key name, then the original key value should be replaced with the provided key
            value. If the initial header value strings don't contain the key name, then the key
            name/value pair should be added to the list and returned.
            </summary>
            <param name="headerValues">The existing header values that the key/value pair should be added to.</param>
            <param name="keyName">The name of the key to add.</param>
            <param name="keyValue">The value of the key to add.</param>
            <returns>The result of setting the provided key name/value pair into the provided headerValues.</returns>
        </member>
    </members>
</doc>
